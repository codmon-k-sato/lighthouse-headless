/** @type {Record<string, {name: LH.IcuMessage} | undefined>} */
export const NotRestoredReasonDescription: Record<string, {
    name: LH.IcuMessage;
} | undefined>;
export namespace UIStrings {
    let notMainFrame: string;
    let backForwardCacheDisabled: string;
    let relatedActiveContentsExist: string;
    let HTTPStatusNotOK: string;
    let schemeNotHTTPOrHTTPS: string;
    let loading: string;
    let wasGrantedMediaAccess: string;
    let HTTPMethodNotGET: string;
    let subframeIsNavigating: string;
    let timeout: string;
    let cacheLimit: string;
    let JavaScriptExecution: string;
    let rendererProcessKilled: string;
    let rendererProcessCrashed: string;
    let grantedMediaStreamAccess: string;
    let cacheFlushed: string;
    let serviceWorkerVersionActivation: string;
    let sessionRestored: string;
    let serviceWorkerPostMessage: string;
    let enteredBackForwardCacheBeforeServiceWorkerHostAdded: string;
    let serviceWorkerClaim: string;
    let haveInnerContents: string;
    let timeoutPuttingInCache: string;
    let backForwardCacheDisabledByLowMemory: string;
    let backForwardCacheDisabledByCommandLine: string;
    let networkRequestDatapipeDrainedAsBytesConsumer: string;
    let networkRequestRedirected: string;
    let networkRequestTimeout: string;
    let networkExceedsBufferLimit: string;
    let navigationCancelledWhileRestoring: string;
    let backForwardCacheDisabledForPrerender: string;
    let userAgentOverrideDiffers: string;
    let foregroundCacheLimit: string;
    let backForwardCacheDisabledForDelegate: string;
    let unloadHandlerExistsInMainFrame: string;
    let unloadHandlerExistsInSubFrame: string;
    let serviceWorkerUnregistration: string;
    let noResponseHead: string;
    let cacheControlNoStore: string;
    let ineligibleAPI: string;
    let internalError: string;
    let webSocket: string;
    let webTransport: string;
    let webRTC: string;
    let mainResourceHasCacheControlNoStore: string;
    let mainResourceHasCacheControlNoCache: string;
    let subresourceHasCacheControlNoStore: string;
    let subresourceHasCacheControlNoCache: string;
    let containsPlugins: string;
    let documentLoaded: string;
    let dedicatedWorkerOrWorklet: string;
    let outstandingNetworkRequestOthers: string;
    let outstandingIndexedDBTransaction: string;
    let requestedNotificationsPermission: string;
    let requestedMIDIPermission: string;
    let requestedAudioCapturePermission: string;
    let requestedVideoCapturePermission: string;
    let requestedBackForwardCacheBlockedSensors: string;
    let requestedBackgroundWorkPermission: string;
    let broadcastChannel: string;
    let indexedDBConnection: string;
    let webXR: string;
    let sharedWorker: string;
    let webLocks: string;
    let webHID: string;
    let webShare: string;
    let requestedStorageAccessGrant: string;
    let webNfc: string;
    let outstandingNetworkRequestFetch: string;
    let outstandingNetworkRequestXHR: string;
    let appBanner: string;
    let printing: string;
    let webDatabase: string;
    let pictureInPicture: string;
    let portal: string;
    let speechRecognizer: string;
    let idleManager: string;
    let paymentManager: string;
    let speechSynthesis: string;
    let keyboardLock: string;
    let webOTPService: string;
    let outstandingNetworkRequestDirectSocket: string;
    let injectedJavascript: string;
    let injectedStyleSheet: string;
    let contentSecurityHandler: string;
    let contentWebAuthenticationAPI: string;
    let contentFileChooser: string;
    let contentSerial: string;
    let contentFileSystemAccess: string;
    let contentMediaDevicesDispatcherHost: string;
    let contentWebBluetooth: string;
    let contentWebUSB: string;
    let contentMediaSession: string;
    let contentMediaSessionService: string;
    let contentMediaPlay: string;
    let contentScreenReader: string;
    let embedderPopupBlockerTabHelper: string;
    let embedderSafeBrowsingTriggeredPopupBlocker: string;
    let embedderSafeBrowsingThreatDetails: string;
    let embedderAppBannerManager: string;
    let embedderDomDistillerViewerSource: string;
    let embedderDomDistillerSelfDeletingRequestDelegate: string;
    let embedderOomInterventionTabHelper: string;
    let embedderOfflinePage: string;
    let embedderChromePasswordManagerClientBindCredentialManager: string;
    let embedderPermissionRequestManager: string;
    let embedderModalDialog: string;
    let embedderExtensions: string;
    let embedderExtensionMessaging: string;
    let embedderExtensionMessagingForOpenPort: string;
    let embedderExtensionSentMessageToCachedFrame: string;
    let errorDocument: string;
    let fencedFramesEmbedder: string;
    let keepaliveRequest: string;
    let authorizationHeader: string;
    let indexedDBEvent: string;
    let cookieDisabled: string;
}
//# sourceMappingURL=bf-cache-strings.d.ts.map